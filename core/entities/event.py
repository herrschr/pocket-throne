# superclass for any events that might be generated by an object and sent to the EventManager
class Event:
	def __init__(self):
		self.name = "Generic Event"
		self.level = 0

# SYSTEM EVENTS
class GameStartedEvent(Event):
	def __init__(self):
		self.name = "GameStartedEvent"

class TickEvent(Event):
	def __init__(self):
		self.name = "CPUTickEvent"

class QuitEvent(Event):
	def __init__(self):
		self.name = "ProgramQuitEvent"

# MAP EVENTS
class MapLoadedEvent(Event):
	def __init__(self, tilemap):
		self.name = "MapLoadedEvent: " + str(tilemap)
		self.tilemap = tilemap

class TileSelectedEvent(Event):
	def __init__(self, selected_tile, pos):
		self.name = "TileSelectedEvent: " + str(selected_tile)
		self.selected_tile = selected_tile
		self.pos = pos

class TileUnselectedEvent(Event):
	def __init__(self):
		self.name = "TileUnselectedEvent"

# TURN EVENTS
class NextTurnEvent(Event):
	def __init__(self, turnnumber):
		self.name = "NextTurnEvent: " + str(turnnumber)
		self.turn = turnnumber

class NextOneEvent(Event):
	def __init__(self, actual_player):
		self.name = "Next Player Event: " + str(actual_player)
		self.actual_player = actual_player

# UNIT EVENTS
class UnitSpawnedEvent(Event):
	def __init__(self, unit, (pos_x, pos_y)):
		self.name = "UnitSpawnedEvent: " + str(unit)
		self.unit = unit
		self.pos = (pos_x, pos_y)

class UnitMoveRequest(Event):
	def __init__(self, unit, (rel_x, rel_y)):
		self.name = "UnitMoveRequest unit=" + str(unit) + " rel=" + str((rel_x, rel_y))
		self.unit = unit
		self.pos = (rel_x, rel_y)

class UnitMovedEvent(Event):
	def __init__(self, unit):
		self.name = "UnitMovedEvent unit=" + str(unit)
		self.unit = unit

class UnitSelectedEvent(Event):
	def __init__(self, unit, moves=[], attacks=[]):
		self.name = "UnitSelectedEvent: " + str(unit) + " moves=" + str(len(moves))
		self.unit = unit
		self.moves = moves
		self.attacks = attacks

class UnitUnselectedEvent(Event):
	def __init__(self):
		self.name = "UnitUnselectedEvent"

class UnitKilledEvent(Event):
	def __init__(self, killed, attacker):
		self.name = "UnitKilledEvent unit=" + repr(killed)
		self.killed = killed
		self.attacker = attacker

# BUILDING EVENTS
class BuildingBuiltEvent(Event):
	def __init__(self, bld, (pos_x, pos_y)):
		self.name = "BuildingBuiltEvent: bld=" + bld.name + " x=" + str(bld.pos_x) + " y=" + str(bld.pos_y)
		self.bld = bld
		self.pos = (pos_x, pos_y)

class BuildingSelectedEvent(Event):
	def __init__(self, bld):
		self.name = "BuildingSelectedEvent bld=" + bld.name + " x=" + str(bld.pos_x) + " y=" + str(bld.pos_y)
		self.building = bld

# CITY EVENTS
class CitySelectedEvent(Event):
	def __init__(self, city, recruitable=[]):
		self.name = "CitySelectedEvent city=" + repr(city) + " recruitable=" + str(recruitable)
		self.city = city
		self.recruitable = recruitable

class CityUnselectedEvent(Event):
	def __init__(self):
		self.name = "City Unselected Event"

class CityRecruitmentStartedEvent(Event):
	def __init__(self, city, blueprint):
		self.name = "CityRecruitmentStartedEvent: unit=" + repr(blueprint) + " in " + city.name
		self.city = city
		self.unit = blueprint

class CityRecruitmentFinishedEvent(Event):
	def __init__(self, city, blueprint):
		self.name = "CityRecruitedUnitEvent in " + city.name + ": unit=" + repr(blueprint)
		self.city = city
		self.blueprint = blueprint

# INPUT EVENTS
class MouseMovedEvent(Event):
	def __init__(self, pos):
		self.name = "MouseMovedEvent  pos=" + str(pos)
		self.pos = pos

class MouseClickedEvent(Event):
	def __init__(self, pos):
		self.name = "MouseClickedEvent: pos=" + str(pos)
		self.pos = pos

class MouseReleasedEvent(Event):
	def __init__(self, pos, gridpos):
		self.name = "MouseReleasedEvent: pos=" + str(pos) + " gridpos=" + str(gridpos)
		self.pos = pos
		self.gridpos = gridpos

class MouseRightClickedEvent(Event):
	def __init__(self, pos):
		self.name = "MouseRightClickedEvent: pos=" + str(pos)
		self.pos = pos

class KeyPressedEvent(Event):
	def __init__(self, key):
		self.name = "KeyPressedEvent: key=" + str(key)
		self.key = key

# BUTTON CALLBACK EVENTS
class GuiButtonClickedEvent(Event):
	def __init__(self, button_tag, button):
		self.name = "ButtonClickedEvent: button_tag=" + button_tag
		self.button_tag = button_tag
		self.button = button

